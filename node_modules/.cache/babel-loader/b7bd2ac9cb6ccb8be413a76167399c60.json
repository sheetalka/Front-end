{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ShapeUtils_1 = require(\"./ShapeUtils\");\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar CanvasUtils = function () {\n  function CanvasUtils() {}\n\n  CanvasUtils.paintBase = function (context, dimension, baseColor) {\n    context.save();\n    context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n    context.fillRect(0, 0, dimension.width, dimension.height);\n    context.restore();\n  };\n\n  CanvasUtils.clear = function (context, dimension) {\n    context.clearRect(0, 0, dimension.width, dimension.height);\n  };\n\n  CanvasUtils.drawPolygonMask = function (context, rawData, stroke) {\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.save();\n      context.beginPath();\n      context.moveTo(rawData[0].x, rawData[0].y);\n\n      for (var i = 1; i < rawData.length; i++) {\n        context.lineTo(rawData[i].x, rawData[i].y);\n      }\n\n      context.closePath();\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n      context.lineWidth = stroke.width;\n      context.stroke();\n      context.restore();\n    }\n  };\n\n  CanvasUtils.drawPolygonMaskPath = function (context, path, stroke, position) {\n    context.save();\n    context.translate(position.x, position.y);\n    var color = typeof stroke.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(stroke.color) : ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n\n    if (color) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color, stroke.opacity);\n      context.lineWidth = stroke.width;\n      context.stroke(path);\n    }\n\n    context.restore();\n  };\n\n  CanvasUtils.drawLineLinked = function (context, width, begin, end, backgroundMask, colorLine, opacity, shadow) {\n    context.save();\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = 'destination-out';\n    }\n\n    if (colorLine) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n      ;\n    }\n\n    context.lineWidth = width;\n    context.beginPath();\n    var color = typeof shadow.color === \"string\" ? ColorUtils_1.ColorUtils.stringToRgb(shadow.color) : ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n    if (shadow.enable && color) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n    }\n\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.stroke();\n    context.closePath();\n    context.restore();\n  };\n\n  CanvasUtils.drawConnectLine = function (context, width, lineStyle, begin, end) {\n    context.save();\n    context.beginPath();\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.stroke();\n    context.closePath();\n    context.restore();\n  };\n\n  CanvasUtils.gradient = function (context, p1, p2, midColor, opacity) {\n    var gradStop = Math.floor(p2.radius / p1.radius);\n\n    if (!p1.color || !p2.color) {\n      return;\n    }\n\n    var sourcePos = p1.position;\n    var destPos = p2.position;\n    var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromColor(p1.color, opacity));\n    grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromColor(midColor, opacity));\n    grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromColor(p2.color, opacity));\n    return grad;\n  };\n\n  CanvasUtils.drawGrabLine = function (context, width, begin, end, colorLine, opacity) {\n    context.save();\n    context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n    context.lineWidth = width;\n    context.beginPath();\n    context.moveTo(begin.x, begin.y);\n    context.lineTo(end.x, end.y);\n    context.stroke();\n    context.closePath();\n    context.restore();\n  };\n\n  CanvasUtils.drawParticle = function (context, particle, colorValue, backgroundMask, radius, opacity) {\n    context.save();\n    var shadow = particle.container.options.particles.shadow;\n    var shadowColor = particle.shadowColor;\n\n    if (shadow.enable && shadowColor) {\n      context.shadowBlur = shadow.blur;\n      context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(shadowColor);\n      context.shadowOffsetX = shadow.offset.x;\n      context.shadowOffsetY = shadow.offset.y;\n    }\n\n    context.fillStyle = colorValue;\n    var pos = {\n      x: particle.position.x + particle.offset.x,\n      y: particle.position.y + particle.offset.y\n    };\n    context.translate(pos.x, pos.y);\n    context.beginPath();\n\n    if (particle.angle !== 0) {\n      context.rotate(particle.angle * Math.PI / 180);\n    }\n\n    if (backgroundMask) {\n      context.globalCompositeOperation = \"destination-out\";\n    }\n\n    var stroke = particle.stroke;\n\n    if (stroke.width > 0 && particle.strokeColor) {\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(particle.strokeColor, particle.stroke.opacity);\n      context.lineWidth = stroke.width;\n    }\n\n    ShapeUtils_1.ShapeUtils.drawShape(context, particle, radius, opacity);\n\n    if (particle.close) {\n      context.closePath();\n    }\n\n    if (stroke.width > 0 && particle.strokeColor) {\n      context.stroke();\n    }\n\n    if (particle.fill) {\n      context.fill();\n    }\n\n    context.restore();\n  };\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":{"version":3,"sources":["C:/Users/Sheetal/Desktop/Front-end/node_modules/tsparticles/dist/Classes/Utils/CanvasUtils.js"],"names":["Object","defineProperty","exports","value","ShapeUtils_1","require","ColorUtils_1","CanvasUtils","paintBase","context","dimension","baseColor","save","fillStyle","fillRect","width","height","restore","clear","clearRect","drawPolygonMask","rawData","stroke","color","ColorUtils","stringToRgb","colorToRgb","beginPath","moveTo","x","y","i","length","lineTo","closePath","strokeStyle","getStyleFromColor","lineWidth","drawPolygonMaskPath","path","position","translate","opacity","drawLineLinked","begin","end","backgroundMask","colorLine","shadow","globalCompositeOperation","enable","shadowBlur","blur","shadowColor","drawConnectLine","lineStyle","gradient","p1","p2","midColor","gradStop","Math","floor","radius","sourcePos","destPos","grad","createLinearGradient","addColorStop","drawGrabLine","drawParticle","particle","colorValue","container","options","particles","shadowOffsetX","offset","shadowOffsetY","pos","angle","rotate","PI","strokeColor","ShapeUtils","drawShape","close","fill"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ShapeUtils_1 = require(\"./ShapeUtils\");\nvar ColorUtils_1 = require(\"./ColorUtils\");\nvar CanvasUtils = (function () {\n    function CanvasUtils() {\n    }\n    CanvasUtils.paintBase = function (context, dimension, baseColor) {\n        context.save();\n        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n        context.fillRect(0, 0, dimension.width, dimension.height);\n        context.restore();\n    };\n    CanvasUtils.clear = function (context, dimension) {\n        context.clearRect(0, 0, dimension.width, dimension.height);\n    };\n    CanvasUtils.drawPolygonMask = function (context, rawData, stroke) {\n        var color = typeof stroke.color === \"string\" ?\n            ColorUtils_1.ColorUtils.stringToRgb(stroke.color) :\n            ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n        if (color) {\n            context.save();\n            context.beginPath();\n            context.moveTo(rawData[0].x, rawData[0].y);\n            for (var i = 1; i < rawData.length; i++) {\n                context.lineTo(rawData[i].x, rawData[i].y);\n            }\n            context.closePath();\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n            context.lineWidth = stroke.width;\n            context.stroke();\n            context.restore();\n        }\n    };\n    CanvasUtils.drawPolygonMaskPath = function (context, path, stroke, position) {\n        context.save();\n        context.translate(position.x, position.y);\n        var color = typeof stroke.color === \"string\" ?\n            ColorUtils_1.ColorUtils.stringToRgb(stroke.color) :\n            ColorUtils_1.ColorUtils.colorToRgb(stroke.color);\n        if (color) {\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(color, stroke.opacity);\n            context.lineWidth = stroke.width;\n            context.stroke(path);\n        }\n        context.restore();\n    };\n    CanvasUtils.drawLineLinked = function (context, width, begin, end, backgroundMask, colorLine, opacity, shadow) {\n        context.save();\n        if (backgroundMask) {\n            context.globalCompositeOperation = 'destination-out';\n        }\n        if (colorLine) {\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n            ;\n        }\n        context.lineWidth = width;\n        context.beginPath();\n        var color = typeof shadow.color === \"string\" ?\n            ColorUtils_1.ColorUtils.stringToRgb(shadow.color) :\n            ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n        if (shadow.enable && color) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(color);\n        }\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.stroke();\n        context.closePath();\n        context.restore();\n    };\n    CanvasUtils.drawConnectLine = function (context, width, lineStyle, begin, end) {\n        context.save();\n        context.beginPath();\n        context.lineWidth = width;\n        context.strokeStyle = lineStyle;\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.stroke();\n        context.closePath();\n        context.restore();\n    };\n    CanvasUtils.gradient = function (context, p1, p2, midColor, opacity) {\n        var gradStop = Math.floor(p2.radius / p1.radius);\n        if (!p1.color || !p2.color) {\n            return;\n        }\n        var sourcePos = p1.position;\n        var destPos = p2.position;\n        var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n        grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromColor(p1.color, opacity));\n        grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromColor(midColor, opacity));\n        grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromColor(p2.color, opacity));\n        return grad;\n    };\n    CanvasUtils.drawGrabLine = function (context, width, begin, end, colorLine, opacity) {\n        context.save();\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(colorLine, opacity);\n        context.lineWidth = width;\n        context.beginPath();\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.stroke();\n        context.closePath();\n        context.restore();\n    };\n    CanvasUtils.drawParticle = function (context, particle, colorValue, backgroundMask, radius, opacity) {\n        context.save();\n        var shadow = particle.container.options.particles.shadow;\n        var shadowColor = particle.shadowColor;\n        if (shadow.enable && shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromColor(shadowColor);\n            context.shadowOffsetX = shadow.offset.x;\n            context.shadowOffsetY = shadow.offset.y;\n        }\n        context.fillStyle = colorValue;\n        var pos = {\n            x: particle.position.x + particle.offset.x,\n            y: particle.position.y + particle.offset.y,\n        };\n        context.translate(pos.x, pos.y);\n        context.beginPath();\n        if (particle.angle !== 0) {\n            context.rotate(particle.angle * Math.PI / 180);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = \"destination-out\";\n        }\n        var stroke = particle.stroke;\n        if (stroke.width > 0 && particle.strokeColor) {\n            context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromColor(particle.strokeColor, particle.stroke.opacity);\n            context.lineWidth = stroke.width;\n        }\n        ShapeUtils_1.ShapeUtils.drawShape(context, particle, radius, opacity);\n        if (particle.close) {\n            context.closePath();\n        }\n        if (stroke.width > 0 && particle.strokeColor) {\n            context.stroke();\n        }\n        if (particle.fill) {\n            context.fill();\n        }\n        context.restore();\n    };\n    return CanvasUtils;\n}());\nexports.CanvasUtils = CanvasUtils;\n"]},"metadata":{},"sourceType":"script"}