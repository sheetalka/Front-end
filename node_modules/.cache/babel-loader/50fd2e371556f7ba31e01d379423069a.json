{"ast":null,"code":"import { CometChat } from \"@cometchat-pro/chat\";\nimport config from \"../config\";\nexport default class CCManager {\n  static init() {\n    return CometChat.init(CCManager.appId);\n  }\n\n  static getTextMessage(uid, text, msgType) {\n    if (msgType === \"user\") {\n      return new CometChat.TextMessage(uid, text, CometChat.MESSAGE_TYPE.TEXT, CometChat.RECEIVER_TYPE.USER);\n    } else {\n      return new CometChat.TextMessage(uid, text, CometChat.MESSAGE_TYPE.TEXT, CometChat.RECEIVER_TYPE.GROUP);\n    }\n  }\n\n  static getLoggedinUser() {\n    return CometChat.getLoggedinUser();\n  }\n\n  static login(UID) {\n    return CometChat.login(UID, this.apiKey);\n  }\n\n  static getGroupMessages(GUID, callback, limit = 30) {\n    const messagesRequest = new CometChat.MessagesRequestBuilder().setGUID(GUID).setLimit(limit).build();\n    callback();\n    return messagesRequest.fetchPrevious();\n  }\n\n  static sendGroupMessage(UID, message) {\n    const textMessage = this.getTextMessage(UID, message, \"group\");\n    return CometChat.sendMessage(textMessage);\n  }\n\n  static joinGroup(GUID) {\n    return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\n  }\n\n  static addMessageListener(callback) {\n    CometChat.addMessageListener(this.LISTENER_KEY_MESSAGE, new CometChat.MessageListener({\n      onTextMessageReceived: textMessage => {\n        callback(textMessage);\n      }\n    }));\n  }\n\n}\nCCManager.LISTENER_KEY_MESSAGE = \"msglistener\";\nCCManager.appId = config.appId;\nCCManager.apiKey = config.apiKey;\nCCManager.LISTENER_KEY_GROUP = \"grouplistener\";","map":{"version":3,"sources":["C:/Users/Sheetal/Desktop/Front-end/src/Components/lib/chat.js"],"names":["CometChat","config","CCManager","init","appId","getTextMessage","uid","text","msgType","TextMessage","MESSAGE_TYPE","TEXT","RECEIVER_TYPE","USER","GROUP","getLoggedinUser","login","UID","apiKey","getGroupMessages","GUID","callback","limit","messagesRequest","MessagesRequestBuilder","setGUID","setLimit","build","fetchPrevious","sendGroupMessage","message","textMessage","sendMessage","joinGroup","GROUP_TYPE","PUBLIC","addMessageListener","LISTENER_KEY_MESSAGE","MessageListener","onTextMessageReceived","LISTENER_KEY_GROUP"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,eAAe,MAAMC,SAAN,CAAgB;AAK7B,SAAOC,IAAP,GAAc;AACZ,WAAOH,SAAS,CAACG,IAAV,CAAeD,SAAS,CAACE,KAAzB,CAAP;AACD;;AACD,SAAOC,cAAP,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AACxC,QAAIA,OAAO,KAAK,MAAhB,EAAwB;AACtB,aAAO,IAAIR,SAAS,CAACS,WAAd,CACLH,GADK,EAELC,IAFK,EAGLP,SAAS,CAACU,YAAV,CAAuBC,IAHlB,EAILX,SAAS,CAACY,aAAV,CAAwBC,IAJnB,CAAP;AAMD,KAPD,MAOO;AACL,aAAO,IAAIb,SAAS,CAACS,WAAd,CACLH,GADK,EAELC,IAFK,EAGLP,SAAS,CAACU,YAAV,CAAuBC,IAHlB,EAILX,SAAS,CAACY,aAAV,CAAwBE,KAJnB,CAAP;AAMD;AACF;;AACD,SAAOC,eAAP,GAAyB;AACvB,WAAOf,SAAS,CAACe,eAAV,EAAP;AACD;;AACD,SAAOC,KAAP,CAAaC,GAAb,EAAkB;AAChB,WAAOjB,SAAS,CAACgB,KAAV,CAAgBC,GAAhB,EAAqB,KAAKC,MAA1B,CAAP;AACD;;AACD,SAAOC,gBAAP,CAAwBC,IAAxB,EAA8BC,QAA9B,EAAwCC,KAAK,GAAG,EAAhD,EAAoD;AAClD,UAAMC,eAAe,GAAG,IAAIvB,SAAS,CAACwB,sBAAd,GACrBC,OADqB,CACbL,IADa,EAErBM,QAFqB,CAEZJ,KAFY,EAGrBK,KAHqB,EAAxB;AAIAN,IAAAA,QAAQ;AACR,WAAOE,eAAe,CAACK,aAAhB,EAAP;AACD;;AACD,SAAOC,gBAAP,CAAwBZ,GAAxB,EAA6Ba,OAA7B,EAAsC;AACpC,UAAMC,WAAW,GAAG,KAAK1B,cAAL,CAAoBY,GAApB,EAAyBa,OAAzB,EAAkC,OAAlC,CAApB;AACA,WAAO9B,SAAS,CAACgC,WAAV,CAAsBD,WAAtB,CAAP;AACD;;AACD,SAAOE,SAAP,CAAiBb,IAAjB,EAAuB;AACrB,WAAOpB,SAAS,CAACiC,SAAV,CAAoBb,IAApB,EAA0BpB,SAAS,CAACkC,UAAV,CAAqBC,MAA/C,EAAuD,EAAvD,CAAP;AACD;;AACD,SAAOC,kBAAP,CAA0Bf,QAA1B,EAAoC;AAClCrB,IAAAA,SAAS,CAACoC,kBAAV,CACE,KAAKC,oBADP,EAEE,IAAIrC,SAAS,CAACsC,eAAd,CAA8B;AAC5BC,MAAAA,qBAAqB,EAAER,WAAW,IAAI;AACpCV,QAAAA,QAAQ,CAACU,WAAD,CAAR;AACD;AAH2B,KAA9B,CAFF;AAQD;;AAvD4B;AAAV7B,S,CACZmC,oB,GAAuB,a;AADXnC,S,CAEZE,K,GAAQH,MAAM,CAACG,K;AAFHF,S,CAGZgB,M,GAASjB,MAAM,CAACiB,M;AAHJhB,S,CAIZsC,kB,GAAqB,e","sourcesContent":["import { CometChat } from \"@cometchat-pro/chat\";\r\nimport config from \"../config\";\r\nexport default class CCManager {\r\n  static LISTENER_KEY_MESSAGE = \"msglistener\";\r\n  static appId = config.appId;\r\n  static apiKey = config.apiKey;\r\n  static LISTENER_KEY_GROUP = \"grouplistener\";\r\n  static init() {\r\n    return CometChat.init(CCManager.appId);\r\n  }\r\n  static getTextMessage(uid, text, msgType) {\r\n    if (msgType === \"user\") {\r\n      return new CometChat.TextMessage(\r\n        uid,\r\n        text,\r\n        CometChat.MESSAGE_TYPE.TEXT,\r\n        CometChat.RECEIVER_TYPE.USER\r\n      );\r\n    } else {\r\n      return new CometChat.TextMessage(\r\n        uid,\r\n        text,\r\n        CometChat.MESSAGE_TYPE.TEXT,\r\n        CometChat.RECEIVER_TYPE.GROUP\r\n      );\r\n    }\r\n  }\r\n  static getLoggedinUser() {\r\n    return CometChat.getLoggedinUser();\r\n  }\r\n  static login(UID) {\r\n    return CometChat.login(UID, this.apiKey);\r\n  }\r\n  static getGroupMessages(GUID, callback, limit = 30) {\r\n    const messagesRequest = new CometChat.MessagesRequestBuilder()\r\n      .setGUID(GUID)\r\n      .setLimit(limit)\r\n      .build();\r\n    callback();\r\n    return messagesRequest.fetchPrevious();\r\n  }\r\n  static sendGroupMessage(UID, message) {\r\n    const textMessage = this.getTextMessage(UID, message, \"group\");\r\n    return CometChat.sendMessage(textMessage);\r\n  }\r\n  static joinGroup(GUID) {\r\n    return CometChat.joinGroup(GUID, CometChat.GROUP_TYPE.PUBLIC, \"\");\r\n  }\r\n  static addMessageListener(callback) {\r\n    CometChat.addMessageListener(\r\n      this.LISTENER_KEY_MESSAGE,\r\n      new CometChat.MessageListener({\r\n        onTextMessageReceived: textMessage => {\r\n          callback(textMessage);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}